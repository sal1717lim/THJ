# -*- coding: utf-8 -*-
"""tp_thj.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ayp9OdQ2WhLkDX6X0Nq4TeYQ2bcXbFyV
"""

import numpy as np
 
def creer_taille(nb_joueur=2,nb_strategie=3):
  taille=()
  for i in range(nb_joueur):
    taille=taille+(nb_strategie,)
  return taille

import random as rd
def randtup(low=-10,high=10,nb_joueur=2):
  issue=()
  for i in range(nb_joueur):
    issue=issue+(rd.randint(low,high),)
  return issue

import numpy as np
def forme_normal(nb_joueur=2,nb_strategie=3):
  taille=creer_taille(nb_joueur,nb_strategie)
  FN=np.zeros(taille).tolist()
  for i in range(taille[0]):
    for j in range(taille[1]):
      FN[i][j]=randtup(nb_joueur=nb_joueur)
  return FN


#Strictement dominante
def sd(FN,joueur=0,strategie=3):
  var=FN.copy()
  for strat in FN:
    var.remove(strat)
    i=0
    dominante=True
    while i <len(var) and dominante:
      j=0
      while j<len(strat) and dominante:
        
        if strat[j][joueur]<var[i][j][joueur]:
          dominante=False
          var=FN.copy()
        j=j+1
      i=i+1
    if dominante:
      return strat
  return None
  


#Faiblement dominÃ©
def fd(FN,joueur=0):
  FD=[]
  var=FN.copy()
  for strat in FN:
    var.remove(strat)
    i=0
    dominante=True
    while i <len(var) and dominante:
      j=0
      while j<len(strat) and dominante:

        if strat[j][joueur]<var[i][j][joueur]:
          dominante=False
          var=FN.copy()
        j=j+1
      if dominante :
        if strat not in FD:
         
          FD.append((strat,var[i]))
        
        var=FN.copy()
      i=i+1
    
  return FD


def ES(FN):
  if len(fd(FN,0))!=0:
    FN.remove(fd(FN,0)[0][1])
    ES(FN)
  
  if len(fd([list(i) for i in zip(*FN)],))!=0:
      FN=[list(i) for i in zip(*FN)]
      FN.remove(fd(FN,1)[0][1])
      FN=[list(i) for i in zip(*FN)]
      ES(FN)

  return FN
